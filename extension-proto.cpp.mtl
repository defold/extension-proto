#define EXTENSION_NAME Proto
#define LIB_NAME "Proto"
#define MODULE_NAME "proto"

#define DLIB_LOG_DOMAIN LIB_NAME
#include <dmsdk/sdk.h>
#include <stdlib.h>


{{#files}}
#include "{{filename_h}}"
{{/files}}



/******************************************************************************
 * PUSH
 ******************************************************************************/

{{#messages}}
static void lua_push{{type_cpp_lower}}(lua_State* L, {{type_cpp}} *msg);
{{/messages}}

static void lua_pushProtobufCBinaryData(lua_State* L, ProtobufCBinaryData binarydata)
{
    lua_pushlstring(L, (const char*)binarydata.data, binarydata.len);
}

{{#messages}}
static void lua_push{{type_cpp_lower}}(lua_State* L, {{type_cpp}} *msg)
{
    lua_newtable(L);

    {{#properties}}
    {{#repeated}}
    // {{name}}
    lua_pushstring(L, "{{name_cpp_lower}}");
    lua_newtable(L);
    int {{name_cpp_lower}}_size = msg->n_{{name_cpp_lower}};
    for (int i = 0; i < {{name_cpp_lower}}_size; i++)
    {
        lua_pushnumber(L, i + 1);
        lua_push{{type_lua}}(L, ({{type_cpp}})(msg->{{name_cpp_lower}}[i]));
        lua_settable(L, -3);
    }
    lua_settable(L, -3);

    {{/repeated}}
    {{#required}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_push{{type_lua}}(L, ({{type_cpp}})(msg->{{name_cpp_lower}}));
    lua_settable(L, -3);

    {{/required}}
    {{#is_proto2_syntax}}
    {{#optional}}
    // {{name}}
    if ({{#type_is_primitive}}msg->has_{{name_cpp_lower}}{{/type_is_primitive}}{{#type_is_string}}msg->{{name_cpp_lower}} != 0{{/type_is_string}}{{#type_is_bytes}}msg->{{name_cpp_lower}}.data != 0{{/type_is_bytes}}{{#type_is_message}}msg->{{name_cpp_lower}} != 0{{/type_is_message}})
    {
        lua_pushstring(L, "{{name}}");
        lua_push{{type_lua}}(L, ({{type_cpp}})(msg->{{name_cpp_lower}}));
        lua_settable(L, -3);
    }

    {{/optional}}
    {{/is_proto2_syntax}}
    {{/properties}}
}
{{/messages}}


/******************************************************************************
 * CHECK 
 ******************************************************************************/

static int luaL_checkboolean(lua_State* L, int narg) { return lua_toboolean(L, narg); }

{{#messages}}
static {{type_cpp}}* luaL_check{{type_cpp_lower}}(lua_State* L, int narg);
{{/messages}}

static ProtobufCBinaryData luaL_checkProtobufCBinaryData(lua_State* L, int narg)
{
    size_t len;
    const char* data = luaL_checklstring(L, narg, &len);

    ProtobufCBinaryData binarydata;
    binarydata.data = (uint8_t*)data;
    binarydata.len = len;
    return binarydata;
}

{{#messages}}
static {{type_cpp}}* luaL_check{{type_cpp_lower}}(lua_State* L, int narg)
{
    if (!lua_istable(L, narg)) {
        luaL_error(L, "Expected value at index %d to be a table", narg);
        return 0;
    }

    {{type_cpp}} *msg = ({{type_cpp}}*)malloc(sizeof({{type_cpp}}));
    {{type_cpp_lower}}__init(msg);

    {{#properties}}
    {{#repeated}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_gettable(L, narg);
    int {{name}}_size = lua_objlen(L, lua_gettop(L));
    int {{name}}_index = lua_gettop(L);
    msg->n_{{name}} = {{name}}_size;
    msg->{{name_cpp_lower}} = ({{type_cpp}}*)malloc(sizeof({{type_cpp}}) * {{name}}_size);
    for (int i = 0; i < {{name}}_size; i++)
    {
        lua_pushnumber(L, i + 1);
        lua_gettable(L, {{name}}_index);
        msg->{{name_cpp_lower}}[i] = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L));
        lua_pop(L, 1);
    }
    lua_pop(L, 1);

    {{/repeated}}
    {{#required}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_gettable(L, narg);
    msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L));
    lua_pop(L, 1);

    {{/required}}
    {{#optional}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_gettable(L, narg);
    if (!lua_isnil(L, lua_gettop(L)))
    {
        {{#is_proto2_syntax}}
        {{#type_is_primitive}}
        msg->has_{{name_cpp_lower}} = 1;
        {{/type_is_primitive}}
        {{/is_proto2_syntax}}
        msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L));
    }
    lua_pop(L, 1);

    {{/optional}}
    {{/properties}}
    return msg;
}
{{/messages}}



/******************************************************************************
 * FREE 
 ******************************************************************************/

{{#messages}}
static void free_{{type_cpp_lower}}({{type_cpp}}* msg);
{{/messages}}

static void free_ProtobufCBinaryData(ProtobufCBinaryData) {};
static void free_number(int32_t) {};
static void free_string(char*) {};
static void free_bool(bool) {};
static void free_boolean(bool) {};

{{#messages}}
static void free_{{type_cpp_lower}}({{type_cpp}}* msg)
{
    {{#properties}}
    {{#repeated}}
    int {{name}}_size = msg->n_{{name}};
    for (int i = 0; i < {{name}}_size; i++)
    {
        free_{{type_lua}}(msg->{{name_cpp_lower}}[i]);
    }
    free(msg->{{name_cpp_lower}});
    {{/repeated}}
    {{^repeated}}
    free_{{type_lua}}(msg->{{name_cpp_lower}});
    {{/repeated}}
    {{/properties}}
    free(msg);
}
{{/messages}}



/******************************************************************************
 * ENCODE AND DECODE
 ******************************************************************************/

{{#messages}}
{{^nested}}
// {{filename}}
static int Decode{{type_cpp}}(lua_State* L)
{
    DM_LUA_STACK_CHECK(L, 1);
    size_t data_length;
    const char* data = luaL_checklstring(L, 1, &data_length);

    {{type_cpp}} *msg = {{type_cpp_lower}}__unpack(0, data_length, (uint8_t*)data);
    lua_push{{type_cpp_lower}}(L, msg);
    {{type_cpp_lower}}__free_unpacked(msg, 0);

    return 1;
}
static int Encode{{type_cpp}}(lua_State* L)
{
    DM_LUA_STACK_CHECK(L, 1);
    {{type_cpp}} *msg = luaL_check{{type_cpp_lower}}(L, 1);

    size_t {{name_lower}}_packed_size = {{type_cpp_lower}}__get_packed_size(msg);
    char* buffer = (char*)malloc({{name_lower}}_packed_size);
    {{type_cpp_lower}}__pack(msg, (uint8_t*)buffer);

    lua_pushlstring(L, buffer, {{name_lower}}_packed_size);
    free(buffer);

    free_{{type_cpp_lower}}(msg);

    return 1;
}

{{/nested}}
{{/messages}}

static const luaL_reg Module_methods[] =
{
    {{#messages}}
    {{^nested}}
    {"encode_{{package_lower}}_{{name_lower}}", Encode{{type_cpp}} },
    {"decode_{{package_lower}}_{{name_lower}}", Decode{{type_cpp}} },
    {{/nested}}
    {{/messages}}
    {0,0}
};

static void LuaInit(lua_State* L)
{
    DM_LUA_STACK_CHECK(L, 0);
    int top = lua_gettop(L);
    luaL_register(L, MODULE_NAME, Module_methods);

    #define SETCONSTANT(name, val) \
    lua_pushnumber(L, (lua_Number) val); \
    lua_setfield(L, -2, #name);

    {{#enums}}
    // {{name}}
    {{#values}}
    SETCONSTANT({{type_cpp_upper}}_{{name}}, {{type_cpp_upper}}__{{name}});
    {{/values}}
    {{/enums}}
    #undef SETCONSTANT

    lua_pop(L, 1);
}

static dmExtension::Result InitializeProto(dmExtension::Params* params)
{
    LuaInit(params->m_L);
    return dmExtension::RESULT_OK;
}

static dmExtension::Result FinalizProto(dmExtension::Params* params)
{
    return dmExtension::RESULT_OK;
}

DM_DECLARE_EXTENSION(EXTENSION_NAME, LIB_NAME, 0, 0, InitializeProto, 0, 0, FinalizProto)
