#define EXTENSION_NAME Proto
#define LIB_NAME "Proto"
#define MODULE_NAME "proto"

#define DLIB_LOG_DOMAIN LIB_NAME
#include <dmsdk/sdk.h>
#include <stdlib.h>


{{#files}}
#include "{{filename_h}}"
{{/files}}



/******************************************************************************
 * PUSH
 ******************************************************************************/

{{#messages}}
static void lua_push{{type_cpp_lower}}(lua_State* L, {{type_cpp}} *msg);
{{/messages}}
{{#messages}}
static void lua_push{{type_cpp_lower}}_repeated(lua_State* L, {{type_cpp}} *msg, int count);
{{/messages}}

static void lua_pushProtobufCBinaryData(lua_State* L, ProtobufCBinaryData binarydata)
{
    lua_pushlstring(L, (const char*)binarydata.data, binarydata.len);
}

{{#messages}}
static void lua_push{{type_cpp_lower}}_repeated(lua_State* L, {{type_cpp}} *msg, int index)
{
    {{#is_map_entry}}
    {{key.type_cpp}} key = ({{key.type_cpp}})(msg->key);
    {{value.type_cpp}} value = ({{value.type_cpp}})(msg->value);
    lua_push{{key.type_lua}}(L, key);
    lua_push{{value.type_lua}}(L, value);
    lua_settable(L, -3);
    {{/is_map_entry}}
    {{^is_map_entry}}
    lua_pushnumber(L, index);
    lua_push{{type_lua}}(L, msg);
    lua_settable(L, -3);
    {{/is_map_entry}}
}
{{/messages}}

{{#messages}}
static void lua_push{{type_cpp_lower}}(lua_State* L, {{type_cpp}} *msg)
{
    lua_newtable(L);

    {{#fields}}
    {{#repeated}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_newtable(L);
    int {{name_cpp_lower}}_size = msg->n_{{name_cpp_lower}};
    for (int i = 0; i < {{name_cpp_lower}}_size; i++)
    {
        {{#type_is_message}}
        {{type_cpp}} {{name}}_msg = ({{type_cpp}})(msg->{{name_cpp_lower}}[i]);
        lua_push{{type_cpp_lower}}_repeated(L, {{name}}_msg, i + 1);
        {{/type_is_message}}
        {{^type_is_message}}
        lua_pushnumber(L, i + 1);
        lua_push{{type_lua}}(L, ({{type_cpp}})(msg->{{name_cpp_lower}}[i]));
        lua_settable(L, -3);
        {{/type_is_message}}
    }
    lua_settable(L, -3);

    {{/repeated}}
    {{#required}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_push{{type_lua}}(L, ({{type_cpp}})(msg->{{name_cpp_lower}}));
    lua_settable(L, -3);

    {{/required}}
    {{#optional}}
    // {{name}}
    {{#oneof}}
    if (msg->{{oneof}}_case == {{oneof_enum}})
    {{/oneof}}
    {{^oneof}}
    {{#is_proto2_syntax}}
    if ({{#type_is_primitive}}msg->has_{{name_cpp_lower}}{{/type_is_primitive}}{{#type_is_string}}msg->{{name_cpp_lower}} != 0{{/type_is_string}}{{#type_is_bytes}}msg->{{name_cpp_lower}}.data != 0{{/type_is_bytes}}{{#type_is_message}}msg->{{name_cpp_lower}} != 0{{/type_is_message}})
    {{/is_proto2_syntax}}
    {{/oneof}}
    {
        lua_pushstring(L, "{{name}}");
        {{#type_is_message}}
        if (msg->{{name_cpp_lower}})
        {
            lua_push{{type_lua}}(L, ({{type_cpp}})(msg->{{name_cpp_lower}}));
        }
        else
        {
            lua_pushnil(L);
        }
        {{/type_is_message}}
        {{^type_is_message}}
        lua_push{{type_lua}}(L, ({{type_cpp}})(msg->{{name_cpp_lower}}));
        {{/type_is_message}}
        lua_settable(L, -3);
    }

    {{/optional}}
    {{/fields}}
}
{{/messages}}


/******************************************************************************
 * CHECK 
 ******************************************************************************/

// get size of table by counting number of keys
static int lua_tablelen(lua_State* L, int index)
{
    int count = 0;
    lua_pushnil(L);  // first key
    while (lua_next(L, index) != 0) // pops key, pushes key-value pair
    {
        lua_pop(L, 1); // remove value, keep key for next iteration
        count++;
    }
    return count;
}

static ProtobufCBinaryData luaL_checkProtobufCBinaryData(lua_State* L, int narg)
{
    size_t len;
    const char* data = luaL_checklstring(L, narg, &len);

    ProtobufCBinaryData binarydata;
    binarydata.data = (uint8_t*)data;
    binarydata.len = len;
    return binarydata;
}

static int luaL_checkboolean(lua_State* L, int narg) { return lua_toboolean(L, narg); }

{{#messages}}
{{#is_map_entry}}
static {{type_cpp}}* luaL_check{{type_cpp_lower}}(lua_State* L, int key, int value);
{{/is_map_entry}}
{{^is_map_entry}}
static {{type_cpp}}* luaL_check{{type_cpp_lower}}(lua_State* L, int narg);
{{/is_map_entry}}
{{/messages}}
{{#enums}}
static int luaL_check{{type_cpp_lower}}(lua_State* L, int narg);
{{/enums}}

{{#messages}}
{{#is_map_entry}}
static {{type_cpp}}* luaL_check{{type_cpp_lower}}(lua_State* L, int key, int value)
{
    {{type_cpp}} *msg = ({{type_cpp}}*)malloc(sizeof({{type_cpp}}));
    {{type_cpp_lower}}__init(msg);
    msg->key = ({{key.type_cpp}})luaL_check{{key.type_lua}}(L, key);
    msg->value = ({{value.type_cpp}})luaL_check{{value.type_lua}}(L, value);
    return msg;
}

{{/is_map_entry}}
{{^is_map_entry}}
static {{type_cpp}}* luaL_check{{type_cpp_lower}}(lua_State* L, int narg)
{
    if (!lua_istable(L, narg)) {
        luaL_error(L, "Expected value at index %d to be a table", narg);
        return 0;
    }

    {{type_cpp}} *msg = ({{type_cpp}}*)malloc(sizeof({{type_cpp}}));
    {{type_cpp_lower}}__init(msg);

    {{#fields}}
    {{#repeated}}
    // {{name}} {{#type_is_map}}[map]{{/type_is_map}}{{^type_is_map}}[repeated]{{/type_is_map}}
    lua_pushstring(L, "{{name}}");
    lua_gettable(L, narg);
    int {{name}}_index = lua_gettop(L);
    {{#is_proto2_syntax}}
    if (!lua_istable(L, {{name}}_index))
    {
        luaL_error(L, "Expected value for key '{{name}}' to be a table");
        return 0;
    }
    {{/is_proto2_syntax}}
    {{^is_proto2_syntax}}
    if (!lua_isnil(L, {{name}}_index))
    {{/is_proto2_syntax}}
    {
        int {{name}}_size = lua_tablelen(L, {{name}}_index);
        msg->n_{{name_cpp_lower}} = {{name}}_size;
        msg->{{name_cpp_lower}} = ({{type_cpp}}*)malloc(sizeof({{type_cpp}}) * {{name}}_size);
        {{#type_is_map}}
        {
            int i = 0;
            lua_pushnil(L);  // first key
            while (lua_next(L, {{name}}_index) != 0) // pops key, pushes key-value pair
            {
                msg->{{name_cpp_lower}}[i++] = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L) - 1, lua_gettop(L));
                lua_pop(L, 1); // pop value
            }
        }
        {{/type_is_map}}
        {{^type_is_map}}
        for (int i = 0; i < {{name}}_size; i++)
        {
            lua_pushnumber(L, i + 1); // key
            lua_gettable(L, {{name}}_index); // pops key, pushes value
            msg->{{name_cpp_lower}}[i] = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L));
            lua_pop(L, 1); // pop value
        }
        {{/type_is_map}}
    }
    lua_pop(L, 1); // pop table "{{name}}"

    {{/repeated}}
    {{#required}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_gettable(L, narg);
    {{#type_is_enum}}
    msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_cpp_lower}}(L, lua_gettop(L));
    {{/type_is_enum}}
    {{^type_is_enum}}
    msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L));
    {{/type_is_enum}}
    lua_pop(L, 1);

    {{/required}}
    {{#optional}}
    // {{name}}
    lua_pushstring(L, "{{name}}");
    lua_gettable(L, narg);
    if (!lua_isnil(L, lua_gettop(L)))
    {
        {{#oneof}}
        msg->{{oneof}}_case = {{oneof_enum}};
        {{#type_is_enum}}
        msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_cpp_lower}}(L, lua_gettop(L));
        {{/type_is_enum}}
        {{^type_is_enum}}
        msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L));
        {{/type_is_enum}}
        {{/oneof}}
        {{^oneof}}
        {{#type_is_enum}}
        {{#is_proto2_syntax}}{{#type_is_primitive}}msg->has_{{name_cpp_lower}} = 1;
        {{/type_is_primitive}}{{/is_proto2_syntax}}msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_cpp_lower}}(L, lua_gettop(L));
        {{/type_is_enum}}
        {{^type_is_enum}}
        {{#is_proto2_syntax}}{{#type_is_primitive}}msg->has_{{name_cpp_lower}} = 1;
        {{/type_is_primitive}}{{/is_proto2_syntax}}msg->{{name_cpp_lower}} = ({{type_cpp}})luaL_check{{type_lua}}(L, lua_gettop(L));
        {{/type_is_enum}}
        {{/oneof}}
    }
    lua_pop(L, 1);

    {{/optional}}
    {{/fields}}
    return msg;
}

{{/is_map_entry}}
{{/messages}}

{{#enums}}
static int luaL_check{{type_cpp_lower}}(lua_State* L, int narg)
{
    if (lua_isnumber(L, narg))
    {
        return lua_tonumber(L, narg);
    }
    else if (lua_isstring(L, narg))
    {
        const ProtobufCEnumDescriptor desc = {{type_cpp_lower}}__descriptor;
        const char* s = lua_tostring(L, narg);
        const ProtobufCEnumValue* e = protobuf_c_enum_descriptor_get_value_by_name(&desc, s);
        if (e == 0)
        {
            return luaL_error(L, "Unable to convert %s to {{type_cpp_lower}}", s);
        }
        return e->value;
    }
    else
    {
        const char* tn = lua_typename(L, narg);
        return luaL_error(L, "Unable to convert value of type %s at index %d to {{type_cpp_lower}}", tn, narg);
    }
}
{{/enums}}


/******************************************************************************
 * FREE 
 ******************************************************************************/

{{#messages}}
static void free_{{type_cpp_lower}}({{type_cpp}}* msg);
{{/messages}}

static void free_ProtobufCBinaryData(ProtobufCBinaryData) {};
static void free_number(int32_t) {};
static void free_string(char*) {};
static void free_bool(bool) {};
static void free_boolean(bool) {};

{{#messages}}
static void free_{{type_cpp_lower}}({{type_cpp}}* msg)
{
    if (msg == 0x0) return;
    {{#fields}}
    {{#repeated}}
    if (msg->{{name_cpp_lower}} != 0x0)
    {
        int {{name}}_size = msg->n_{{name_cpp_lower}};
        for (int i = 0; i < {{name}}_size; i++)
        {
            free_{{type_lua}}(msg->{{name_cpp_lower}}[i]);
        }
        {{#type_is_allocated}}
        free(msg->{{name_cpp_lower}});
        {{/type_is_allocated}}
    }
    {{/repeated}}
    {{^repeated}}
    {{#oneof}}
    if (msg->{{oneof}}_case == {{oneof_enum}})
    {
        {{#type_is_allocated}}
        if (msg->{{name_cpp_lower}} != 0x0)
        {
            free_{{type_lua}}(msg->{{name_cpp_lower}});
        }
        {{/type_is_allocated}}
    }
    {{/oneof}}
    {{^oneof}}
    {{#type_is_allocated}}
    if (msg->{{name_cpp_lower}} != 0x0)
    {
        free_{{type_lua}}(msg->{{name_cpp_lower}});
    }
    {{/type_is_allocated}}
    {{/oneof}}
    {{/repeated}}
    {{/fields}}
    free(msg);
}
{{/messages}}



/******************************************************************************
 * ENCODE AND DECODE
 ******************************************************************************/

{{#messages}}
{{^nested}}
// {{filename}}
static int Decode{{type_cpp}}(lua_State* L)
{
    DM_LUA_STACK_CHECK(L, 1);
    size_t data_length;
    const char* data = luaL_checklstring(L, 1, &data_length);

    {{type_cpp}} *msg = {{type_cpp_lower}}__unpack(0, data_length, (uint8_t*)data);
    if (msg != 0)
    {
        lua_push{{type_cpp_lower}}(L, msg);
        {{type_cpp_lower}}__free_unpacked(msg, 0);
    }
    else
    {
        lua_pushnil(L);
    }

    return 1;
}
static int Encode{{type_cpp}}(lua_State* L)
{
    DM_LUA_STACK_CHECK(L, 1);
    {{type_cpp}} *msg = luaL_check{{type_cpp_lower}}(L, 1);

    size_t {{name_lower}}_packed_size = {{type_cpp_lower}}__get_packed_size(msg);
    char* buffer = (char*)malloc({{name_lower}}_packed_size);
    {{type_cpp_lower}}__pack(msg, (uint8_t*)buffer);

    lua_pushlstring(L, buffer, {{name_lower}}_packed_size);
    free(buffer);

    free_{{type_cpp_lower}}(msg);

    return 1;
}

{{/nested}}
{{/messages}}

static const luaL_reg Module_methods[] =
{
    {{#messages}}
    {{^nested}}
    {"encode_{{package_lower}}_{{name_lower}}", Encode{{type_cpp}} },
    {"decode_{{package_lower}}_{{name_lower}}", Decode{{type_cpp}} },
    {{/nested}}
    {{/messages}}
    {0,0}
};

static void LuaInit(lua_State* L)
{
    DM_LUA_STACK_CHECK(L, 0);
    int top = lua_gettop(L);
    luaL_register(L, MODULE_NAME, Module_methods);

    #define SETCONSTANT(name, val) \
    lua_pushnumber(L, (lua_Number) val); \
    lua_setfield(L, -2, #name);

    {{#enums}}
    // {{name}}
    {{#values}}
    SETCONSTANT({{type_cpp_upper}}_{{name}}, {{type_cpp_upper}}__{{name}});
    {{/values}}
    {{/enums}}
    #undef SETCONSTANT

    lua_pop(L, 1);
}

static dmExtension::Result InitializeProto(dmExtension::Params* params)
{
    LuaInit(params->m_L);
    return dmExtension::RESULT_OK;
}

static dmExtension::Result FinalizProto(dmExtension::Params* params)
{
    return dmExtension::RESULT_OK;
}

DM_DECLARE_EXTENSION(EXTENSION_NAME, LIB_NAME, 0, 0, InitializeProto, 0, 0, FinalizProto)
